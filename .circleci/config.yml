version: 2.1      
jobs:
  plan:
    docker:
      - image: public.ecr.aws/hashicorp/terraform:latest
    working_directory: ~/project
    environment:
      BASH_ENV: /root/.bashrc
    steps:
      - checkout
      - run:
          name: terraform init and plan
          command: |
            touch $BASH_ENV            
            echo 'export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' >> $BASH_ENV
            echo 'export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION_VALUE}' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' >> $BASH_ENV
            source $BASH_ENV
            terraform init tf/
            terraform plan tf/
  apply:
    docker:
      - image: public.ecr.aws/hashicorp/terraform:latest
    working_directory: ~/project
    environment:
      BASH_ENV: /root/.bashrc
    steps:
      - checkout
      - run:
          name: terraform init and plan
          command: |
            touch $BASH_ENV            
            echo 'export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' >> $BASH_ENV
            echo 'export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION_VALUE}' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' >> $BASH_ENV
            source $BASH_ENV
            terraform init -lock=false tf/
            terraform apply -auto-approve tf/

  test_application:
    docker:
      - image: ubuntu:latest
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: false
      - run: |
          apt-get update -y && apt-get install curl unzip -y
          apt-get install apt-transport-https ca-certificates curl gnupg lsb-release -y
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update -y
          apt-get install docker-ce-cli -y
          docker build -t app-jm .
          docker run -it --rm app-jm node index.test.js

  build_and_push_image_docker:
    docker:
      - image: ubuntu:latest
    working_directory: ~/project
    environment:
      BASH_ENV: /root/.bashrc
    steps:
      - checkout          
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: false
      - run: |
          apt-get update -y && apt-get install curl unzip -y
          apt-get install apt-transport-https ca-certificates curl gnupg lsb-release -y
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update -y
          apt-get install docker-ce-cli -y          
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install -i /usr/local/aws-cli -b /usr/local/bin
          aws --version
          touch $BASH_ENV            
          echo 'export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' >> $BASH_ENV
          echo 'export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION_VALUE}' >> $BASH_ENV
          echo 'export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' >> $BASH_ENV
          source $BASH_ENV
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 986052115073.dkr.ecr.us-east-2.amazonaws.com
          docker build -t app-jm .
          docker tag app-jm:latest 986052115073.dkr.ecr.us-east-2.amazonaws.com/app-jm:latest
          docker push 986052115073.dkr.ecr.us-east-2.amazonaws.com/app-jm:latest
  
  app_deploy:
    docker:
      - image: ubuntu:latest
    working_directory:  ~/project
    environment:
      BASH_ENV: /root/.bashrc
    steps:
      - checkout
      - run:
          name: app deployment in cluster
          command: |
            apt-get update -y && apt-get install curl unzip -y
            apt-get install -y apt-transport-https ca-certificates
            curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
            echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
            apt-get update
            apt-get install -y kubectl
            
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install -i /usr/local/aws-cli -b /usr/local/bin
            aws --version
            touch $BASH_ENV            
            echo 'export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}' >> $BASH_ENV
            echo 'export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION_VALUE}' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}' >> $BASH_ENV

            source $BASH_ENV
            
            aws eks --region us-east-2 update-kubeconfig --name eks-jm
            kubectl apply -f tf/namespace.yaml
            kubectl apply -f tf/deployment.yaml
            kubectl apply -f tf/service.yaml
            kubectl apply -f tf/nginx_ingress_deployment.yaml
            kubectl apply -f tf/ingress.yaml

workflows:
  plan:
    jobs:
      - plan      
      - approve_apply_terraform:
          type: approval
          requires:
            - plan        
      - apply:
          requires:
            - approve_apply_terraform
      - test_application:
          requires:
            - apply
      - approve_test:
          type: approval
          requires:
            - test_application
      - build_and_push_image_docker:
          requires:
            - approve_test
      - approve_deploy:
          type: approval
          requires:
            - build_and_push_image_docker
      - app_deploy:
          requires:
            - approve_deploy
